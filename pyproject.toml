[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "json-formatter"
version = "1.0.0"
description = "Python과 Flask로 구축된 간단한 웹 기반 JSON 포맷터 및 검증기"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Flask",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
]
dependencies = [
    "Flask>=3.0.0,<4.0.0",
    "Werkzeug>=3.0.0,<4.0.0",
    "Jinja2>=3.1.0,<4.0.0",
    "click>=8.0.0,<9.0.0",
    "itsdangerous>=2.1.0,<3.0.0",
    "MarkupSafe>=2.1.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "typing-extensions>=4.0.0,<5.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing framework and coverage
    "pytest>=7.0.0,<9.0.0",
    "pytest-cov>=4.0.0,<6.0.0",
    "pytest-mock>=3.10.0,<4.0.0",

    # Code formatting and linting
    "black>=23.0.0,<25.0.0",
    "flake8>=6.0.0,<8.0.0",
    "flake8-docstrings>=1.7.0,<2.0.0",
    "flake8-import-order>=0.18.0,<1.0.0",

    # Type checking
    "mypy>=1.0.0,<2.0.0",
    "types-Flask>=1.1.0",

    # Security scanning
    "bandit>=1.7.0,<2.0.0",

    # Pre-commit hooks
    "pre-commit>=3.0.0,<4.0.0",

    # Development utilities
    "isort>=5.12.0,<6.0.0",
    "autopep8>=2.0.0,<3.0.0",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
explicit_package_bases = true
namespace_packages = true
mypy_path = "src"
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "models", "services", "web", "utils"]
known_third_party = ["flask", "werkzeug", "jinja2", "click", "itsdangerous", "markupsafe", "dotenv"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src"]

[tool.pytest.ini_options]
testpaths = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --cov=src --cov-report=term-missing --cov-report=html"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
